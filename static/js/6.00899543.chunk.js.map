{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","onChange","target","value","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","setSelectedChar","Helmet","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","a","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/6.00899543.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 60000);\n\n        // return () => {\n        //     clearInterval(timerId)\n        // }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charList.scss';\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {loading, error, getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <CSSTransition key={item.id}  timeout={500} classNames=\"char__item\">\r\n                    <li \r\n                        className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                            <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <TransitionGroup component={null}>\r\n                <ul className=\"char__grid\">\r\n                    {items}\r\n                </ul>\r\n            </TransitionGroup>\r\n\r\n        )\r\n    }\r\n    \r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length === 1 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form onChange={e => !e.target.value ? setChar(null) : null}>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react/cjs/react.development\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Marvel information portal\"/>\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary >\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary >\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c118eb92fd6ba5fcfed9da795ebe5e84';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount}` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method='GET', body = null, headers = {'Content-type': 'aplication/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, headers,  body})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [] )\r\n\r\n        const clearError = useCallback(() => setError(null), [])\r\n\r\n        return {loading, request, clearError, error}\r\n}"],"sourceRoot":""}