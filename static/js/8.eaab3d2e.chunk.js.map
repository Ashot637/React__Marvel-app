{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["ComicsList","props","useState","comicsList","setComicsList","newComicsLoading","setNewComicsLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicslistLoaded","newComicsList","ended","length","items","arr","map","item","i","CSSTransition","timeout","in","classNames","className","to","id","src","thumbnail","alt","title","price","TransitionGroup","component","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","style","display","onClick","ComicsPage","Helmet","name","content","AppBanner","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","a","res","results","_transformCharacter","getCharacter","getCharacterByName","_transformComics","getComic","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices","avengers","avengersLogo"],"mappings":"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","file":"static/js/8.eaab3d2e.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './comicsList.scss';\n\nconst ComicsList = (props) => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newComicsLoading, setNewComicsLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewComicsLoading(false) : setNewComicsLoading(true);\n        getAllComics(offset)\n        .then(onComicslistLoaded)\n    }\n\n    const onComicslistLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewComicsLoading(false);\n        setOffset(offset => offset + 8)\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <CSSTransition timeout={500} in={true} classNames=\"comics__item\" key={i}>\n                    <li className=\"comics__item\">\n                        <Link to={`/comics/${item.id}`}>\n                            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price}</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n\n            )\n        })\n\n    return (\n        <TransitionGroup component={null}>\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        </TransitionGroup>\n\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newComicsLoading ? <Spinner /> : null;\n\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button className=\"button button__main button__long\"\n            disabled={newComicsLoading}\n            style={{display: comicsEnded ? 'none' : 'block'}}\n            onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from '../comicsList/ComicsList'\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"page with list of our comics\"/>\r\n                <title>Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c118eb92fd6ba5fcfed9da795ebe5e84';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount}` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method='GET', body = null, headers = {'Content-type': 'aplication/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, headers,  body})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [] )\r\n\r\n        const clearError = useCallback(() => setError(null), [])\r\n\r\n        return {loading, request, clearError, error}\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}